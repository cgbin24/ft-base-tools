import{_ as e,c as a,o,ag as r}from"./chunks/framework.DPDPlp3K.js";const p=JSON.parse('{"title":"验证工具","description":"","frontmatter":{},"headers":[],"relativePath":"api/validate.md","filePath":"api/validate.md","lastUpdated":1741289563000}'),l={name:"api/validate.md"};function i(d,t,s,n,h,c){return o(),a("div",null,t[0]||(t[0]=[r('<h1 id="验证工具" tabindex="-1">验证工具 <a class="header-anchor" href="#验证工具" aria-label="Permalink to &quot;验证工具&quot;">​</a></h1><p>验证工具提供了一系列用于数据验证的实用函数。</p><h2 id="isemail" tabindex="-1">isEmail <a class="header-anchor" href="#isemail" aria-label="Permalink to &quot;isEmail&quot;">​</a></h2><p>验证字符串是否为有效的电子邮件地址。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isEmail(value: string): boolean ，，，</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>string</td><td>要验证的字符串</td></tr></tbody></table><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是有效的电子邮件地址返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isEmail } from &#39;ft-base-tools&#39;;</p><p>console.log(isEmail(&#39;user@example.com&#39;)); // true console.log(isEmail(&#39;user.name+tag@example.co.uk&#39;)); // true console.log(isEmail(&#39;invalid-email&#39;)); // false console.log(isEmail(&#39;user@example&#39;)); // false ，，，</p><h2 id="isurl" tabindex="-1">isUrl <a class="header-anchor" href="#isurl" aria-label="Permalink to &quot;isUrl&quot;">​</a></h2><p>验证字符串是否为有效的 URL。</p><h3 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isUrl(value: string): boolean ，，，</p><h3 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>string</td><td>要验证的字符串</td></tr></tbody></table><h3 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是有效的 URL 返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isUrl } from &#39;ft-base-tools&#39;;</p><p>console.log(isUrl(&#39;<a href="https://example.com" target="_blank" rel="noreferrer">https://example.com</a>&#39;)); // true console.log(isUrl(&#39;<a href="http://example.com/path?query=value" target="_blank" rel="noreferrer">http://example.com/path?query=value</a>&#39;)); // true console.log(isUrl(&#39;example.com&#39;)); // false（缺少协议） console.log(isUrl(&#39;https://&#39;)); // false ，，，</p><h2 id="isphonenumber" tabindex="-1">isPhoneNumber <a class="header-anchor" href="#isphonenumber" aria-label="Permalink to &quot;isPhoneNumber&quot;">​</a></h2><p>验证字符串是否为有效的手机号码。</p><h3 id="语法-2" tabindex="-1">语法 <a class="header-anchor" href="#语法-2" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isPhoneNumber( value: string, options?: { country?: &#39;CN&#39; | &#39;US&#39; | &#39;UK&#39; | &#39;JP&#39; | &#39;KR&#39; | &#39;INT&#39;; } ): boolean ，，，</p><h3 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>string</td><td>要验证的字符串</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.country</td><td>string</td><td>可选。国家/地区代码，默认为 &#39;CN&#39;（中国）</td></tr></tbody></table><h3 id="返回值-2" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-2" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是有效的手机号码返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-2" tabindex="-1">示例 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isPhoneNumber } from &#39;ft-base-tools&#39;;</p><p>// 中国手机号 console.log(isPhoneNumber(&#39;13812345678&#39;)); // true console.log(isPhoneNumber(&#39;138-1234-5678&#39;)); // true</p><p>// 美国手机号 console.log(isPhoneNumber(&#39;212-555-1234&#39;, { country: &#39;US&#39; })); // true console.log(isPhoneNumber(&#39;(212) 555-1234&#39;, { country: &#39;US&#39; })); // true</p><p>// 国际格式 console.log(isPhoneNumber(&#39;+86 138 1234 5678&#39;, { country: &#39;INT&#39; })); // true ，，，</p><h2 id="isidcard" tabindex="-1">isIDCard <a class="header-anchor" href="#isidcard" aria-label="Permalink to &quot;isIDCard&quot;">​</a></h2><p>验证字符串是否为有效的身份证号码。</p><h3 id="语法-3" tabindex="-1">语法 <a class="header-anchor" href="#语法-3" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isIDCard( value: string, options?: { country?: &#39;CN&#39;; } ): boolean ，，，</p><h3 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>string</td><td>要验证的字符串</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.country</td><td>string</td><td>可选。国家/地区代码，目前仅支持 &#39;CN&#39;（中国）</td></tr></tbody></table><h3 id="返回值-3" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-3" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是有效的身份证号码返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-3" tabindex="-1">示例 <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isIDCard } from &#39;ft-base-tools&#39;;</p><p>// 中国身份证号（18位） console.log(isIDCard(&#39;110101199001011234&#39;)); // true</p><p>// 中国身份证号（15位，旧版） console.log(isIDCard(&#39;110101900101123&#39;)); // true</p><p>// 无效的身份证号 console.log(isIDCard(&#39;12345678&#39;)); // false ，，，</p><h2 id="iscreditcard" tabindex="-1">isCreditCard <a class="header-anchor" href="#iscreditcard" aria-label="Permalink to &quot;isCreditCard&quot;">​</a></h2><p>验证字符串是否为有效的信用卡号码。</p><h3 id="语法-4" tabindex="-1">语法 <a class="header-anchor" href="#语法-4" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isCreditCard(value: string): boolean ，，，</p><h3 id="参数-4" tabindex="-1">参数 <a class="header-anchor" href="#参数-4" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>string</td><td>要验证的字符串</td></tr></tbody></table><h3 id="返回值-4" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-4" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是有效的信用卡号码返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-4" tabindex="-1">示例 <a class="header-anchor" href="#示例-4" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isCreditCard } from &#39;ft-base-tools&#39;;</p><p>console.log(isCreditCard(&#39;4111111111111111&#39;)); // true（Visa） console.log(isCreditCard(&#39;5555555555554444&#39;)); // true（MasterCard） console.log(isCreditCard(&#39;371449635398431&#39;)); // true（American Express） console.log(isCreditCard(&#39;1234567890123456&#39;)); // false ，，，</p><h2 id="ispostalcode" tabindex="-1">isPostalCode <a class="header-anchor" href="#ispostalcode" aria-label="Permalink to &quot;isPostalCode&quot;">​</a></h2><p>验证字符串是否为有效的邮政编码。</p><h3 id="语法-5" tabindex="-1">语法 <a class="header-anchor" href="#语法-5" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isPostalCode( value: string, options?: { country?: &#39;CN&#39; | &#39;US&#39; | &#39;UK&#39; | &#39;JP&#39; | &#39;KR&#39;; } ): boolean ，，，</p><h3 id="参数-5" tabindex="-1">参数 <a class="header-anchor" href="#参数-5" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>string</td><td>要验证的字符串</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.country</td><td>string</td><td>可选。国家/地区代码，默认为 &#39;CN&#39;（中国）</td></tr></tbody></table><h3 id="返回值-5" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-5" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是有效的邮政编码返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-5" tabindex="-1">示例 <a class="header-anchor" href="#示例-5" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isPostalCode } from &#39;ft-base-tools&#39;;</p><p>// 中国邮政编码 console.log(isPostalCode(&#39;100000&#39;)); // true</p><p>// 美国邮政编码 console.log(isPostalCode(&#39;90210&#39;, { country: &#39;US&#39; })); // true console.log(isPostalCode(&#39;90210-1234&#39;, { country: &#39;US&#39; })); // true</p><p>// 英国邮政编码 console.log(isPostalCode(&#39;SW1A 1AA&#39;, { country: &#39;UK&#39; })); // true ，，，</p><h2 id="isip" tabindex="-1">isIP <a class="header-anchor" href="#isip" aria-label="Permalink to &quot;isIP&quot;">​</a></h2><p>验证字符串是否为有效的 IP 地址。</p><h3 id="语法-6" tabindex="-1">语法 <a class="header-anchor" href="#语法-6" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isIP( value: string, options?: { version?: 4 | 6; } ): boolean ，，，</p><h3 id="参数-6" tabindex="-1">参数 <a class="header-anchor" href="#参数-6" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>string</td><td>要验证的字符串</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.version</td><td>number</td><td>可选。IP 版本，可以是 4 或 6，默认同时支持两种版本</td></tr></tbody></table><h3 id="返回值-6" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-6" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是有效的 IP 地址返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-6" tabindex="-1">示例 <a class="header-anchor" href="#示例-6" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isIP } from &#39;ft-base-tools&#39;;</p><p>// IPv4 console.log(isIP(&#39;192.168.1.1&#39;)); // true console.log(isIP(&#39;192.168.1.1&#39;, { version: 4 })); // true console.log(isIP(&#39;192.168.1.1&#39;, { version: 6 })); // false</p><p>// IPv6 console.log(isIP(&#39;2001:0db8:85a3:0000:0000:8a2e:0370:7334&#39;)); // true console.log(isIP(&#39;2001:db8:85a3::8a2e:370:7334&#39;)); // true（缩写形式） console.log(isIP(&#39;2001:db8:85a3::8a2e:370:7334&#39;, { version: 6 })); // true console.log(isIP(&#39;2001:db8:85a3::8a2e:370:7334&#39;, { version: 4 })); // false ，，，</p><h2 id="isdate" tabindex="-1">isDate <a class="header-anchor" href="#isdate" aria-label="Permalink to &quot;isDate&quot;">​</a></h2><p>验证字符串是否为有效的日期。</p><h3 id="语法-7" tabindex="-1">语法 <a class="header-anchor" href="#语法-7" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isDate( value: string, options?: { format?: string; strict?: boolean; } ): boolean ，，，</p><h3 id="参数-7" tabindex="-1">参数 <a class="header-anchor" href="#参数-7" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>string</td><td>要验证的字符串</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.format</td><td>string</td><td>可选。日期格式，例如 &#39;YYYY-MM-DD&#39;</td></tr><tr><td>options.strict</td><td>boolean</td><td>可选。是否严格验证，默认为 false</td></tr></tbody></table><h3 id="返回值-7" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-7" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是有效的日期返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-7" tabindex="-1">示例 <a class="header-anchor" href="#示例-7" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isDate } from &#39;ft-base-tools&#39;;</p><p>console.log(isDate(&#39;2025-01-01&#39;)); // true console.log(isDate(&#39;2025/01/01&#39;)); // true console.log(isDate(&#39;01/01/2025&#39;)); // true console.log(isDate(&#39;2025-02-30&#39;)); // false（2月没有30日）</p><p>// 指定格式 console.log(isDate(&#39;2025-01-01&#39;, { format: &#39;YYYY-MM-DD&#39; })); // true console.log(isDate(&#39;01/01/2025&#39;, { format: &#39;MM/DD/YYYY&#39; })); // true console.log(isDate(&#39;2025-01-01&#39;, { format: &#39;MM/DD/YYYY&#39; })); // false（格式不匹配）</p><p>// 严格模式 console.log(isDate(&#39;2025-01-01&#39;, { strict: true })); // true console.log(isDate(&#39;2025-1-1&#39;, { format: &#39;YYYY-MM-DD&#39;, strict: true })); // false（月和日需要两位数） ，，，</p><h2 id="isnumber" tabindex="-1">isNumber <a class="header-anchor" href="#isnumber" aria-label="Permalink to &quot;isNumber&quot;">​</a></h2><p>验证值是否为有效的数字。</p><h3 id="语法-8" tabindex="-1">语法 <a class="header-anchor" href="#语法-8" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isNumber( value: any, options?: { min?: number; max?: number; integer?: boolean; positive?: boolean; negative?: boolean; } ): boolean ，，，</p><h3 id="参数-8" tabindex="-1">参数 <a class="header-anchor" href="#参数-8" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>any</td><td>要验证的值</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.min</td><td>number</td><td>可选。最小值</td></tr><tr><td>options.max</td><td>number</td><td>可选。最大值</td></tr><tr><td>options.integer</td><td>boolean</td><td>可选。是否必须为整数，默认为 false</td></tr><tr><td>options.positive</td><td>boolean</td><td>可选。是否必须为正数，默认为 false</td></tr><tr><td>options.negative</td><td>boolean</td><td>可选。是否必须为负数，默认为 false</td></tr></tbody></table><h3 id="返回值-8" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-8" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是有效的数字且满足条件返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-8" tabindex="-1">示例 <a class="header-anchor" href="#示例-8" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isNumber } from &#39;ft-base-tools&#39;;</p><p>console.log(isNumber(123)); // true console.log(isNumber(&#39;123&#39;)); // true console.log(isNumber(&#39;abc&#39;)); // false</p><p>// 范围验证 console.log(isNumber(5, { min: 1, max: 10 })); // true console.log(isNumber(15, { min: 1, max: 10 })); // false</p><p>// 整数验证 console.log(isNumber(5, { integer: true })); // true console.log(isNumber(5.5, { integer: true })); // false</p><p>// 正数/负数验证 console.log(isNumber(5, { positive: true })); // true console.log(isNumber(-5, { positive: true })); // false console.log(isNumber(-5, { negative: true })); // true console.log(isNumber(5, { negative: true })); // false ，，，</p><h2 id="isinteger" tabindex="-1">isInteger <a class="header-anchor" href="#isinteger" aria-label="Permalink to &quot;isInteger&quot;">​</a></h2><p>验证值是否为整数。</p><h3 id="语法-9" tabindex="-1">语法 <a class="header-anchor" href="#语法-9" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isInteger( value: any, options?: { min?: number; max?: number; positive?: boolean; negative?: boolean; } ): boolean ，，，</p><h3 id="参数-9" tabindex="-1">参数 <a class="header-anchor" href="#参数-9" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>any</td><td>要验证的值</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.min</td><td>number</td><td>可选。最小值</td></tr><tr><td>options.max</td><td>number</td><td>可选。最大值</td></tr><tr><td>options.positive</td><td>boolean</td><td>可选。是否必须为正数，默认为 false</td></tr><tr><td>options.negative</td><td>boolean</td><td>可选。是否必须为负数，默认为 false</td></tr></tbody></table><h3 id="返回值-9" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-9" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是整数且满足条件返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-9" tabindex="-1">示例 <a class="header-anchor" href="#示例-9" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isInteger } from &#39;ft-base-tools&#39;;</p><p>console.log(isInteger(123)); // true console.log(isInteger(&#39;123&#39;)); // true console.log(isInteger(123.45)); // false console.log(isInteger(&#39;abc&#39;)); // false</p><p>// 范围验证 console.log(isInteger(5, { min: 1, max: 10 })); // true console.log(isInteger(15, { min: 1, max: 10 })); // false</p><p>// 正数/负数验证 console.log(isInteger(5, { positive: true })); // true console.log(isInteger(-5, { positive: true })); // false console.log(isInteger(-5, { negative: true })); // true ，，，</p><h2 id="isstring" tabindex="-1">isString <a class="header-anchor" href="#isstring" aria-label="Permalink to &quot;isString&quot;">​</a></h2><p>验证值是否为字符串。</p><h3 id="语法-10" tabindex="-1">语法 <a class="header-anchor" href="#语法-10" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isString( value: any, options?: { minLength?: number; maxLength?: number; pattern?: RegExp | string; } ): boolean ，，，</p><h3 id="参数-10" tabindex="-1">参数 <a class="header-anchor" href="#参数-10" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>any</td><td>要验证的值</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.minLength</td><td>number</td><td>可选。最小长度</td></tr><tr><td>options.maxLength</td><td>number</td><td>可选。最大长度</td></tr><tr><td>options.pattern</td><td>RegExp | string</td><td>可选。匹配的正则表达式或字符串</td></tr></tbody></table><h3 id="返回值-10" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-10" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是字符串且满足条件返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-10" tabindex="-1">示例 <a class="header-anchor" href="#示例-10" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isString } from &#39;ft-base-tools&#39;;</p><p>console.log(isString(&#39;hello&#39;)); // true console.log(isString(123)); // false</p><p>// 长度验证 console.log(isString(&#39;hello&#39;, { minLength: 3 })); // true console.log(isString(&#39;hi&#39;, { minLength: 3 })); // false console.log(isString(&#39;hello&#39;, { maxLength: 10 })); // true console.log(isString(&#39;hello world&#39;, { maxLength: 10 })); // false console.log(isString(&#39;hello&#39;, { minLength: 3, maxLength: 10 })); // true</p><p>// 模式验证 console.log(isString(&#39;hello&#39;, { pattern: /^[a-z]+$/ })); // true console.log(isString(&#39;Hello&#39;, { pattern: /^[a-z]+$/ })); // false console.log(isString(&#39;hello&#39;, { pattern: &#39;hello&#39; })); // true ，，，</p><h2 id="isboolean" tabindex="-1">isBoolean <a class="header-anchor" href="#isboolean" aria-label="Permalink to &quot;isBoolean&quot;">​</a></h2><p>验证值是否为布尔值。</p><h3 id="语法-11" tabindex="-1">语法 <a class="header-anchor" href="#语法-11" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isBoolean(value: any): boolean ，，，</p><h3 id="参数-11" tabindex="-1">参数 <a class="header-anchor" href="#参数-11" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>any</td><td>要验证的值</td></tr></tbody></table><h3 id="返回值-11" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-11" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是布尔值返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-11" tabindex="-1">示例 <a class="header-anchor" href="#示例-11" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isBoolean } from &#39;ft-base-tools&#39;;</p><p>console.log(isBoolean(true)); // true console.log(isBoolean(false)); // true console.log(isBoolean(&#39;true&#39;)); // false console.log(isBoolean(1)); // false console.log(isBoolean(0)); // false ，，，</p><h2 id="isarray" tabindex="-1">isArray <a class="header-anchor" href="#isarray" aria-label="Permalink to &quot;isArray&quot;">​</a></h2><p>验证值是否为数组。</p><h3 id="语法-12" tabindex="-1">语法 <a class="header-anchor" href="#语法-12" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isArray( value: any, options?: { minLength?: number; maxLength?: number; itemType?: &#39;string&#39; | &#39;number&#39; | &#39;boolean&#39; | &#39;object&#39; | &#39;any&#39;; } ): boolean ，，，</p><h3 id="参数-12" tabindex="-1">参数 <a class="header-anchor" href="#参数-12" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>any</td><td>要验证的值</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.minLength</td><td>number</td><td>可选。最小长度</td></tr><tr><td>options.maxLength</td><td>number</td><td>可选。最大长度</td></tr><tr><td>options.itemType</td><td>string</td><td>可选。数组项的类型</td></tr></tbody></table><h3 id="返回值-12" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-12" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是数组且满足条件返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-12" tabindex="-1">示例 <a class="header-anchor" href="#示例-12" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isArray } from &#39;ft-base-tools&#39;;</p><p>console.log(isArray([1, 2, 3])); // true console.log(isArray(&#39;hello&#39;)); // false</p><p>// 长度验证 console.log(isArray([1, 2, 3], { minLength: 2 })); // true console.log(isArray([1], { minLength: 2 })); // false console.log(isArray([1, 2, 3], { maxLength: 5 })); // true console.log(isArray([1, 2, 3, 4, 5, 6], { maxLength: 5 })); // false</p><p>// 类型验证 console.log(isArray([1, 2, 3], { itemType: &#39;number&#39; })); // true console.log(isArray([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], { itemType: &#39;string&#39; })); // true console.log(isArray([1, &#39;a&#39;, true], { itemType: &#39;any&#39; })); // true console.log(isArray([1, &#39;a&#39;, true], { itemType: &#39;number&#39; })); // false ，，，</p><h2 id="isobject" tabindex="-1">isObject <a class="header-anchor" href="#isobject" aria-label="Permalink to &quot;isObject&quot;">​</a></h2><p>验证值是否为对象。</p><h3 id="语法-13" tabindex="-1">语法 <a class="header-anchor" href="#语法-13" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function isObject( value: any, options?: { schema?: Record&lt;string, any&gt;; allowNull?: boolean; } ): boolean ，，，</p><h3 id="参数-13" tabindex="-1">参数 <a class="header-anchor" href="#参数-13" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>any</td><td>要验证的值</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.schema</td><td>Record&lt;string, any&gt;</td><td>可选。对象模式，用于验证对象的属性</td></tr><tr><td>options.allowNull</td><td>boolean</td><td>可选。是否允许 null 值，默认为 false</td></tr></tbody></table><h3 id="返回值-13" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-13" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>如果是对象且满足条件返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="示例-13" tabindex="-1">示例 <a class="header-anchor" href="#示例-13" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { isObject } from &#39;ft-base-tools&#39;;</p><p>console.log(isObject({ name: &#39;John&#39; })); // true console.log(isObject([])); // false（数组不被视为对象） console.log(isObject(null)); // false console.log(isObject(null, { allowNull: true })); // true</p><p>// 模式验证 const schema = { name: { type: &#39;string&#39;, required: true }, age: { type: &#39;number&#39;, required: true, min: 0 }, email: { type: &#39;string&#39;, pattern: /^.+@.+..+$/ } };</p><p>console.log(isObject({ name: &#39;John&#39;, age: 30, email: &#39;john@example.com&#39; }, { schema })); // true console.log(isObject({ name: &#39;John&#39;, age: -5, email: &#39;john@example.com&#39; }, { schema })); // false（age 小于 0） console.log(isObject({ name: &#39;John&#39;, email: &#39;john@example.com&#39; }, { schema })); // false（缺少 age） ，，，</p><h2 id="validate" tabindex="-1">validate <a class="header-anchor" href="#validate" aria-label="Permalink to &quot;validate&quot;">​</a></h2><p>通用数据验证函数，支持复杂的验证规则。</p><h3 id="语法-14" tabindex="-1">语法 <a class="header-anchor" href="#语法-14" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function validate( value: any, rules: ValidationRule | ValidationRule[], options?: { stopOnFirstError?: boolean; } ): ValidationResult ，，，</p><h3 id="参数-14" tabindex="-1">参数 <a class="header-anchor" href="#参数-14" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>any</td><td>要验证的值</td></tr><tr><td>rules</td><td>ValidationRule | ValidationRule[]</td><td>验证规则或规则数组</td></tr><tr><td>options</td><td>object</td><td>可选。验证选项</td></tr><tr><td>options.stopOnFirstError</td><td>boolean</td><td>可选。是否在第一个错误处停止，默认为 true</td></tr></tbody></table><h3 id="返回值-14" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-14" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>返回验证结果对象，包含 <code>valid</code> 和 <code>errors</code> 属性。</p><h3 id="示例-14" tabindex="-1">示例 <a class="header-anchor" href="#示例-14" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { validate } from &#39;ft-base-tools&#39;;</p><p>// 简单验证 const emailResult = validate(&#39;user@example.com&#39;, { type: &#39;email&#39;, message: &#39;请输入有效的电子邮件地址&#39; }); console.log(emailResult.valid); // true console.log(emailResult.errors); // []</p><p>// 多规则验证 const passwordResult = validate(&#39;abc&#39;, [ { type: &#39;string&#39;, message: &#39;密码必须是字符串&#39; }, { type: &#39;string&#39;, minLength: 6, message: &#39;密码长度不能少于6个字符&#39; }, { type: &#39;string&#39;, pattern: /^(?=.<em>[a-z])(?=.</em>[A-Z])(?=.*\\d)/, message: &#39;密码必须包含大小写字母和数字&#39; } ]); console.log(passwordResult.valid); // false console.log(passwordResult.errors); // [&#39;密码长度不能少于6个字符&#39;]</p><p>// 对象验证 const userResult = validate({ name: &#39;John&#39;, age: 17, email: &#39;john@example&#39; }, { type: &#39;object&#39;, schema: { name: { type: &#39;string&#39;, required: true }, age: { type: &#39;number&#39;, min: 18, message: &#39;年龄必须大于或等于18岁&#39; }, email: { type: &#39;email&#39;, message: &#39;请输入有效的电子邮件地址&#39; } } }, { stopOnFirstError: false });</p><p>console.log(userResult.valid); // false console.log(userResult.errors); // [&#39;年龄必须大于或等于18岁&#39;, &#39;请输入有效的电子邮件地址&#39;] ，，，</p><h2 id="createvalidator" tabindex="-1">createValidator <a class="header-anchor" href="#createvalidator" aria-label="Permalink to &quot;createValidator&quot;">​</a></h2><p>创建自定义验证器。</p><h3 id="语法-15" tabindex="-1">语法 <a class="header-anchor" href="#语法-15" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>，，，typescript function createValidator( rules: Record&lt;string, ValidationRule | ValidationRule[]&gt; ): { validate: (data: Record&lt;string, any&gt;) =&gt; ValidationResult; validateField: (field: string, value: any) =&gt; ValidationResult; } ，，，</p><h3 id="参数-15" tabindex="-1">参数 <a class="header-anchor" href="#参数-15" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>rules</td><td>Record&lt;string, ValidationRule | ValidationRule[]&gt;</td><td>验证规则对象</td></tr></tbody></table><h3 id="返回值-15" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-15" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>返回一个包含 <code>validate</code> 和 <code>validateField</code> 方法的验证器对象。</p><h3 id="示例-15" tabindex="-1">示例 <a class="header-anchor" href="#示例-15" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>，，，javascript import { createValidator } from &#39;ft-base-tools&#39;;</p><p>// 创建表单验证器 const formValidator = createValidator({ username: [ { type: &#39;string&#39;, required: true, message: &#39;用户名不能为空&#39; }, { type: &#39;string&#39;, minLength: 3, maxLength: 20, message: &#39;用户名长度必须在3-20个字符之间&#39; } ], email: { type: &#39;email&#39;, message: &#39;请输入有效的电子邮件地址&#39; }, password: [ { type: &#39;string&#39;, required: true, message: &#39;密码不能为空&#39; }, { type: &#39;string&#39;, minLength: 6, message: &#39;密码长度不能少于6个字符&#39; }, { type: &#39;string&#39;, pattern: /^(?=.<em>[a-z])(?=.</em>[A-Z])(?=.*\\d)/, message: &#39;密码必须包含大小写字母和数字&#39; } ], age: { type: &#39;number&#39;, min: 18, message: &#39;年龄必须大于或等于18岁&#39; } });</p><p>// 验证整个表单 const formData = { username: &#39;john&#39;, email: &#39;john@example.com&#39;, password: &#39;Password123&#39;, age: 25 };</p><p>const formResult = formValidator.validate(formData); console.log(formResult.valid); // true console.log(formResult.errors); // []</p><p>// 验证单个字段 const emailResult = formValidator.validateField(&#39;email&#39;, &#39;invalid-email&#39;); console.log(emailResult.valid); // false console.log(emailResult.errors); // [&#39;请输入有效的电子邮件地址&#39;] ，，，</p>',204)]))}const b=e(l,[["render",i]]);export{p as __pageData,b as default};
